{"version":3,"sources":["services/nb/nb.service.ts","services/git/git.service.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseIndexContents","idEntriesCleaned","contents","split","map","itemName","index","filter","Object","fromEntries","fs","LightningFS","URL_KEY","dir","url","window","localStorage","getItem","newUrl","prompt","alert","location","reload","Error","setItem","clone","a","git","http","depth","singleBranch","pull","fastForwardOnly","author","name","ls","path","promises","readFile","join","encoding","indexContents","idMap","filePath","fileContents","getIdMapFromPaths","paths","length","App","useState","setPaths","setIdMap","setFileContents","goToPath","useCallback","pathPiece","newPaths","slice","concat","loadFile","onClick","message","entries","id","substr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad407d4c.chunk.js","sourcesContent":["import { IDMap } from \"../../shared.types\";\n\nexport const parseIndexContents = ({ contents }: { contents: string }) => {\n  const lines = contents.split(\"\\n\");\n  // TODO Write a test to ensure that line numbers start 1 and not 0\n  const idEntries = lines.map((itemName, index) => [index + 1, itemName]);\n  // TODO Write a test to ensure that empty lines are stripped\n  const idEntriesCleaned = idEntries.filter(([id, name]) => name !== \"\");\n  const idMap: IDMap = Object.fromEntries(idEntriesCleaned);\n  return idMap;\n};\n","import LightningFS from \"@isomorphic-git/lightning-fs\";\nimport join from \"globjoin\";\nimport git from \"isomorphic-git\";\nimport http from \"isomorphic-git/http/web\";\nimport { FS } from \"../../shared.types\";\nimport { parseIndexContents } from \"../nb/nb.service\";\n\nconst fs: FS = new LightningFS(\"fs\");\n\nconst URL_KEY = \"__nbw_url\" as const;\n\nconst dir = \"/repo\";\nconst url = window.localStorage.getItem(URL_KEY);\n\nif (url === null || url === \"\") {\n  const newUrl = window.prompt(\"Please enter a git URL. #VN0f5G\");\n  if (newUrl === null || newUrl === \"\") {\n    window.alert(\"Sorry, this didn't work. Please try again.\");\n    window.location.reload();\n    throw new Error(\"Aborted #uKmsO1\");\n  }\n  window.localStorage.setItem(URL_KEY, newUrl);\n  window.location.reload();\n  throw new Error(\"Aborted #462OVE\");\n}\n\nexport const clone = async () => {\n  await git.clone({\n    fs,\n    http,\n    dir,\n    url,\n    depth: 10,\n    singleBranch: true,\n  });\n};\n\nexport const pull = async () => {\n  await git.pull({\n    fs,\n    http,\n    dir,\n    url,\n    fastForwardOnly: true,\n    author: {\n      name: \"nb-web\",\n    },\n  });\n};\n\nexport const ls = async ({ path = \"/\" }: { path?: string } = {}) => {\n  const indexContents = await fs.promises.readFile(join(dir, path, \".index\"), {\n    encoding: \"utf8\",\n  });\n\n  const idMap = parseIndexContents({ contents: indexContents });\n\n  return idMap;\n};\n\nexport const readFile = async ({ path }: { path: string }) => {\n  const filePath = join(dir, path);\n  const fileContents = await fs.promises.readFile(filePath, {\n    encoding: \"utf8\",\n  });\n  return fileContents;\n};\n","import join from \"globjoin\";\nimport React, { useCallback, useState } from \"react\";\nimport * as git from \"./services/git/git.service\";\nimport { IDMap } from \"./shared.types\";\n\n(window as any).join = join;\n\nconst getIdMapFromPaths = async (paths: string[]) => {\n  if (paths.length === 0) {\n    return {};\n  }\n  const path = join(...paths);\n  const idMap = await git.ls({ path });\n  return idMap;\n};\n\nfunction App() {\n  const [paths, setPaths] = useState<string[]>([]);\n  const [idMap, setIdMap] = useState<IDMap>({});\n  const [fileContents, setFileContents] = useState(\"\");\n\n  const goToPath = useCallback(\n    async (pathPiece: string) => {\n      setFileContents(\"\");\n      const newPaths =\n        pathPiece === \"..\" && paths.length > 1\n          ? paths.slice(0, -1)\n          : paths.concat(pathPiece);\n      setPaths(newPaths);\n      const idMap = await getIdMapFromPaths(newPaths);\n      setIdMap(idMap);\n    },\n    [setPaths, paths, setFileContents]\n  );\n\n  const loadFile = useCallback(\n    async (name: string) => {\n      const path = join(...paths, name);\n      const fileContents = await git.readFile({ path });\n      setFileContents(fileContents);\n    },\n    [paths]\n  );\n\n  const path = join(...paths);\n\n  return (\n    <div>\n      <p>Current path: {path}</p>\n      <p>\n        <button\n          onClick={async () => {\n            try {\n              await git.clone();\n              alert(\"Cloned successfully #6Z3R6m\");\n            } catch (error) {\n              alert(`Clone failed #f6AL6q\\n${error.message}`);\n            }\n          }}\n        >\n          Clone\n        </button>\n        {\" - \"}\n        <button\n          onClick={async () => {\n            try {\n              await git.pull();\n              alert(\"Pulled successfully #SKoEv8\");\n            } catch (error) {\n              alert(`Pull failed #R740Qp\\n${error.message}`);\n            }\n          }}\n        >\n          Pull\n        </button>\n        {\" - \"}\n        <button\n          onClick={async () => {\n            goToPath(\"/\");\n          }}\n        >\n          Load notebook\n        </button>\n      </p>\n      {fileContents === \"\" ? null : (\n        <blockquote>\n          <h2>Currently selected note:</h2>\n          <pre>{fileContents}</pre>\n        </blockquote>\n      )}\n      <div>\n        <h2>Navigation</h2>\n        {paths.length === 0 ? null : (\n          <p>\n            <button onClick={() => goToPath(\"..\")}>../</button>\n          </p>\n        )}\n        {Object.entries(idMap).map(([id, name]) => (\n          <p key={id}>\n            <button\n              onClick={async () => {\n                if (name.substr(-3) !== \".md\") {\n                  goToPath(name);\n                } else {\n                  loadFile(name);\n                }\n              }}\n            >\n              [{id}] {name}\n            </button>\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}