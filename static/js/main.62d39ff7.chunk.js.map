{"version":3,"sources":["shared.constants.ts","services/git/git.service.ts","services/nb/nb.service.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fs","LightningFS","dir","URL_KEY","url","window","localStorage","getItem","newUrl","prompt","alert","location","reload","Error","setItem","clone","a","git","http","depth","singleBranch","pull","fastForwardOnly","author","name","readFile","path","filePath","join","promises","encoding","fileContents","parseIndexContents","contents","split","map","itemName","index","filter","getIndex","indexContents","getIdMapFromPaths","paths","length","nb","App","useState","setPaths","setIndex","setFileContents","search","setSearch","goToPath","useCallback","pathPiece","newPaths","slice","concat","loadFile","filteredIndex","useMemo","id","toString","indexOf","onClick","message","style","padding","border","children","value","onChange","event","currentTarget","substr","scrollTo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62d39ff7.chunk.js","sourcesContent":["import LightningFS from \"@isomorphic-git/lightning-fs\";\nimport { FS } from \"./shared.types\";\n\nexport const fs: FS = new LightningFS(\"fs\");\n\nexport const dir = \"/repo\";\n","import join from \"globjoin\";\nimport git from \"isomorphic-git\";\nimport http from \"isomorphic-git/http/web\";\nimport { fs, dir } from \"../../shared.constants\";\n\nconst URL_KEY = \"__nbw_url\" as const;\n\nconst url = window.localStorage.getItem(URL_KEY);\n\nif (url === null || url === \"\") {\n  const newUrl = window.prompt(\"Please enter a git URL. #VN0f5G\");\n  if (newUrl === null || newUrl === \"\") {\n    window.alert(\"Sorry, this didn't work. Please try again.\");\n    window.location.reload();\n    throw new Error(\"Aborted #uKmsO1\");\n  }\n  window.localStorage.setItem(URL_KEY, newUrl);\n  window.location.reload();\n  throw new Error(\"Aborted #462OVE\");\n}\n\nexport const clone = async () => {\n  await git.clone({\n    fs,\n    http,\n    dir,\n    url,\n    depth: 10,\n    singleBranch: true,\n  });\n};\n\nexport const pull = async () => {\n  await git.pull({\n    fs,\n    http,\n    dir,\n    url,\n    fastForwardOnly: true,\n    author: {\n      name: \"nb-web\",\n    },\n  });\n};\n\nexport const readFile = async ({ path }: { path: string }) => {\n  const filePath = join(dir, path);\n  const fileContents = await fs.promises.readFile(filePath, {\n    encoding: \"utf8\",\n  });\n  return fileContents;\n};\n","import join from \"globjoin\";\nimport { fs, dir } from \"../../shared.constants\";\nimport { Index } from \"../../shared.types\";\n\nexport const parseIndexContents = ({ contents }: { contents: string }) => {\n  const lines = contents.split(\"\\n\");\n  // TODO Write a test to ensure that line numbers start 1 and not 0\n  const idEntries = lines.map((itemName, index): [number, string] => [\n    index + 1,\n    itemName,\n  ]);\n  // TODO Write a test to ensure that empty lines are stripped\n  const idEntriesCleaned = idEntries.filter(([id, name]) => name !== \"\");\n  return idEntriesCleaned;\n};\n\nexport const getIndex = async ({\n  path = \"/\",\n}: { path?: string } = {}): Promise<Index> => {\n  const indexContents = await fs.promises.readFile(join(dir, path, \".index\"), {\n    encoding: \"utf8\",\n  });\n\n  const index = parseIndexContents({ contents: indexContents });\n\n  return index;\n};\n","import join from \"globjoin\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport * as git from \"./services/git/git.service\";\nimport * as nb from \"./services/nb/nb.service\";\nimport { Index } from \"./shared.types\";\n\n(window as any).join = join;\n\nconst getIdMapFromPaths = async (paths: string[]) => {\n  if (paths.length === 0) {\n    return [];\n  }\n  const path = join(...paths);\n  const index = await nb.getIndex({ path });\n  return index;\n};\n\nfunction App() {\n  const [paths, setPaths] = useState<string[]>([]);\n  const [index, setIndex] = useState<Index>([]);\n  const [fileContents, setFileContents] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n\n  const goToPath = useCallback(\n    async (pathPiece: string) => {\n      setFileContents(\"\");\n      setSearch(\"\");\n      const newPaths =\n        pathPiece === \"..\" && paths.length > 1\n          ? paths.slice(0, -1)\n          : pathPiece === \"/\"\n          ? [pathPiece]\n          : paths.concat(pathPiece);\n      setPaths(newPaths);\n      const index = await getIdMapFromPaths(newPaths);\n      setIndex(index);\n    },\n    [setPaths, paths, setFileContents, setSearch]\n  );\n\n  const loadFile = useCallback(\n    async (name: string) => {\n      const path = join(...paths, name);\n      const fileContents = await git.readFile({ path });\n      setFileContents(fileContents);\n    },\n    [paths]\n  );\n\n  const filteredIndex = useMemo(() => {\n    if (search.length === 0) {\n      return index;\n    }\n\n    return index.filter(([id, name]) => {\n      if (id.toString().indexOf(search) !== -1) {\n        return true;\n      }\n      if (name.indexOf(search) !== -1) {\n        return true;\n      }\n      return false;\n    });\n  }, [index, search]);\n\n  const path = join(...paths);\n\n  return (\n    <div>\n      <p>Current path: {path}</p>\n      <p>\n        <button\n          onClick={async () => {\n            try {\n              await git.clone();\n              alert(\"Cloned successfully #6Z3R6m\");\n            } catch (error) {\n              alert(`Clone failed #f6AL6q\\n${error.message}`);\n            }\n          }}\n        >\n          Clone\n        </button>\n        {\" - \"}\n        <button\n          onClick={async () => {\n            try {\n              await git.pull();\n              alert(\"Pulled successfully #SKoEv8\");\n            } catch (error) {\n              alert(`Pull failed #R740Qp\\n${error.message}`);\n            }\n          }}\n        >\n          Pull\n        </button>\n        {\" - \"}\n        <button\n          onClick={async () => {\n            goToPath(\"/\");\n          }}\n        >\n          Load notebook\n        </button>\n      </p>\n      {fileContents === \"\" ? null : (\n        <>\n          <h2>Selection</h2>\n          <blockquote\n            style={{ padding: \"1rem 2rem\", border: \"1px black solid\" }}\n          >\n            <ReactMarkdown children={fileContents} />\n          </blockquote>\n        </>\n      )}\n      <div>\n        <h2>Navigation</h2>\n        <p>\n          Search:{\" \"}\n          <input\n            value={search}\n            onChange={(event) => {\n              setSearch(event.currentTarget.value);\n            }}\n          />{\" \"}\n          ({index.length} items, {filteredIndex.length} matches)\n        </p>\n        {paths.length === 0 ? null : (\n          <p>\n            <button onClick={() => goToPath(\"..\")}>../</button>\n          </p>\n        )}\n        {filteredIndex.map(([id, name]) => (\n          <p key={id}>\n            <button\n              onClick={async () => {\n                if (name.substr(-3) !== \".md\") {\n                  goToPath(name);\n                } else {\n                  loadFile(name);\n                }\n                window.scrollTo(0, 0);\n              }}\n            >\n              [{id}] {name}\n            </button>\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}